// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Feedback      ProductFeedback[]
  Comment       Comment[]
  Reply         Reply[]
  Upvote        Upvote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductFeedback {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  status      Status    @default(SUGGESTION)
  upvotes     Int       @default(0)
  comments    Comment[]
  category    Category
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Upvote      Upvote[]
}

enum Status {
  SUGGESTION
  IN_PROGRESS
  LIVE
}

enum Category {
  UI
  UX
  ENHANCEMENT
  BUG
  FEATURE
}

model Comment {
  id         String          @id @default(uuid())
  content    String          @db.VarChar(250)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  feedback   ProductFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  feedbackId Int
  replies    Reply[]         @relation("ReplyOnComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(250)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation("ReplyOnComment", fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  repliedTo String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upvote {
  id         String          @id @default(uuid())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  feedback   ProductFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  feedbackId Int
  createdAt  DateTime        @default(now())

  @@unique([userId, feedbackId])
}
